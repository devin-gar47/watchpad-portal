{"ast":null,"code":"import _cloneRegExp from \"./_cloneRegExp.js\";\nimport type from \"../type.js\";\n/**\n * Copies an object.\n *\n * @private\n * @param {*} value The value to be copied\n * @param {Array} refFrom Array containing the source references\n * @param {Array} refTo Array containing the copied source references\n * @param {Boolean} deep Whether or not to perform deep cloning.\n * @return {*} The copied value.\n */\n\nexport default function _clone(value, refFrom, refTo, deep) {\n  var copy = function copy(copiedValue) {\n    var len = refFrom.length;\n    var idx = 0;\n\n    while (idx < len) {\n      if (value === refFrom[idx]) {\n        return refTo[idx];\n      }\n\n      idx += 1;\n    }\n\n    refFrom[idx] = value;\n    refTo[idx] = copiedValue;\n\n    for (var key in value) {\n      if (value.hasOwnProperty(key)) {\n        copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];\n      }\n    }\n\n    return copiedValue;\n  };\n\n  switch (type(value)) {\n    case 'Object':\n      return copy(Object.create(Object.getPrototypeOf(value)));\n\n    case 'Array':\n      return copy([]);\n\n    case 'Date':\n      return new Date(value.valueOf());\n\n    case 'RegExp':\n      return _cloneRegExp(value);\n\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'BigInt64Array':\n    case 'BigUint64Array':\n      return value.slice();\n\n    default:\n      return value;\n  }\n}","map":{"version":3,"sources":["/Users/veenguyen/Desktop/MS in Software Engineering/SE491/watchpad-portal/node_modules/ramda/es/internal/_clone.js"],"names":["_cloneRegExp","type","_clone","value","refFrom","refTo","deep","copy","copiedValue","len","length","idx","key","hasOwnProperty","Object","create","getPrototypeOf","Date","valueOf","slice"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,mBAAzB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,OAAvB,EAAgCC,KAAhC,EAAuCC,IAAvC,EAA6C;AAC1D,MAAIC,IAAI,GAAG,SAASA,IAAT,CAAcC,WAAd,EAA2B;AACpC,QAAIC,GAAG,GAAGL,OAAO,CAACM,MAAlB;AACA,QAAIC,GAAG,GAAG,CAAV;;AAEA,WAAOA,GAAG,GAAGF,GAAb,EAAkB;AAChB,UAAIN,KAAK,KAAKC,OAAO,CAACO,GAAD,CAArB,EAA4B;AAC1B,eAAON,KAAK,CAACM,GAAD,CAAZ;AACD;;AAEDA,MAAAA,GAAG,IAAI,CAAP;AACD;;AAEDP,IAAAA,OAAO,CAACO,GAAD,CAAP,GAAeR,KAAf;AACAE,IAAAA,KAAK,CAACM,GAAD,CAAL,GAAaH,WAAb;;AAEA,SAAK,IAAII,GAAT,IAAgBT,KAAhB,EAAuB;AACrB,UAAIA,KAAK,CAACU,cAAN,CAAqBD,GAArB,CAAJ,EAA+B;AAC7BJ,QAAAA,WAAW,CAACI,GAAD,CAAX,GAAmBN,IAAI,GAAGJ,MAAM,CAACC,KAAK,CAACS,GAAD,CAAN,EAAaR,OAAb,EAAsBC,KAAtB,EAA6B,IAA7B,CAAT,GAA8CF,KAAK,CAACS,GAAD,CAA1E;AACD;AACF;;AAED,WAAOJ,WAAP;AACD,GAtBD;;AAwBA,UAAQP,IAAI,CAACE,KAAD,CAAZ;AACE,SAAK,QAAL;AACE,aAAOI,IAAI,CAACO,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,cAAP,CAAsBb,KAAtB,CAAd,CAAD,CAAX;;AAEF,SAAK,OAAL;AACE,aAAOI,IAAI,CAAC,EAAD,CAAX;;AAEF,SAAK,MAAL;AACE,aAAO,IAAIU,IAAJ,CAASd,KAAK,CAACe,OAAN,EAAT,CAAP;;AAEF,SAAK,QAAL;AACE,aAAOlB,YAAY,CAACG,KAAD,CAAnB;;AAEF,SAAK,WAAL;AACA,SAAK,YAAL;AACA,SAAK,mBAAL;AACA,SAAK,YAAL;AACA,SAAK,aAAL;AACA,SAAK,YAAL;AACA,SAAK,aAAL;AACA,SAAK,cAAL;AACA,SAAK,cAAL;AACA,SAAK,eAAL;AACA,SAAK,gBAAL;AACE,aAAOA,KAAK,CAACgB,KAAN,EAAP;;AAEF;AACE,aAAOhB,KAAP;AA3BJ;AA6BD","sourcesContent":["import _cloneRegExp from \"./_cloneRegExp.js\";\nimport type from \"../type.js\";\n/**\n * Copies an object.\n *\n * @private\n * @param {*} value The value to be copied\n * @param {Array} refFrom Array containing the source references\n * @param {Array} refTo Array containing the copied source references\n * @param {Boolean} deep Whether or not to perform deep cloning.\n * @return {*} The copied value.\n */\n\nexport default function _clone(value, refFrom, refTo, deep) {\n  var copy = function copy(copiedValue) {\n    var len = refFrom.length;\n    var idx = 0;\n\n    while (idx < len) {\n      if (value === refFrom[idx]) {\n        return refTo[idx];\n      }\n\n      idx += 1;\n    }\n\n    refFrom[idx] = value;\n    refTo[idx] = copiedValue;\n\n    for (var key in value) {\n      if (value.hasOwnProperty(key)) {\n        copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];\n      }\n    }\n\n    return copiedValue;\n  };\n\n  switch (type(value)) {\n    case 'Object':\n      return copy(Object.create(Object.getPrototypeOf(value)));\n\n    case 'Array':\n      return copy([]);\n\n    case 'Date':\n      return new Date(value.valueOf());\n\n    case 'RegExp':\n      return _cloneRegExp(value);\n\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'BigInt64Array':\n    case 'BigUint64Array':\n      return value.slice();\n\n    default:\n      return value;\n  }\n}"]},"metadata":{},"sourceType":"module"}