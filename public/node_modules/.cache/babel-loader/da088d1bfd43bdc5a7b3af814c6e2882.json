{"ast":null,"code":"import _Set from \"./internal/_Set.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xuniqBy from \"./internal/_xuniqBy.js\";\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied function to\n * each list element. Prefers the first item if the supplied function produces\n * the same value on two items. [`R.equals`](#equals) is used for comparison.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> b) -> [a] -> [a]\n * @param {Function} fn A function used to produce a value to use during comparisons.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n */\n\nvar uniqBy = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xuniqBy, function (fn, list) {\n  var set = new _Set();\n  var result = [];\n  var idx = 0;\n  var appliedItem, item;\n\n  while (idx < list.length) {\n    item = list[idx];\n    appliedItem = fn(item);\n\n    if (set.add(appliedItem)) {\n      result.push(item);\n    }\n\n    idx += 1;\n  }\n\n  return result;\n}));\n\nexport default uniqBy;","map":{"version":3,"sources":["/Users/veenguyen/Desktop/MS in Software Engineering/SE491/watchpad-portal/node_modules/ramda/es/uniqBy.js"],"names":["_Set","_curry2","_dispatchable","_xuniqBy","uniqBy","fn","list","set","result","idx","appliedItem","item","length","add","push"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,oBAAjB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,MAAM,GACV,aACAH,OAAO,EACP,aACAC,aAAa,CAAC,EAAD,EAAKC,QAAL,EAAe,UAAUE,EAAV,EAAcC,IAAd,EAAoB;AAC9C,MAAIC,GAAG,GAAG,IAAIP,IAAJ,EAAV;AACA,MAAIQ,MAAM,GAAG,EAAb;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,WAAJ,EAAiBC,IAAjB;;AAEA,SAAOF,GAAG,GAAGH,IAAI,CAACM,MAAlB,EAA0B;AACxBD,IAAAA,IAAI,GAAGL,IAAI,CAACG,GAAD,CAAX;AACAC,IAAAA,WAAW,GAAGL,EAAE,CAACM,IAAD,CAAhB;;AAEA,QAAIJ,GAAG,CAACM,GAAJ,CAAQH,WAAR,CAAJ,EAA0B;AACxBF,MAAAA,MAAM,CAACM,IAAP,CAAYH,IAAZ;AACD;;AAEDF,IAAAA,GAAG,IAAI,CAAP;AACD;;AAED,SAAOD,MAAP;AACD,CAlBY,CAFN,CAFP;;AAwBA,eAAeJ,MAAf","sourcesContent":["import _Set from \"./internal/_Set.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xuniqBy from \"./internal/_xuniqBy.js\";\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied function to\n * each list element. Prefers the first item if the supplied function produces\n * the same value on two items. [`R.equals`](#equals) is used for comparison.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> b) -> [a] -> [a]\n * @param {Function} fn A function used to produce a value to use during comparisons.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n */\n\nvar uniqBy =\n/*#__PURE__*/\n_curry2(\n/*#__PURE__*/\n_dispatchable([], _xuniqBy, function (fn, list) {\n  var set = new _Set();\n  var result = [];\n  var idx = 0;\n  var appliedItem, item;\n\n  while (idx < list.length) {\n    item = list[idx];\n    appliedItem = fn(item);\n\n    if (set.add(appliedItem)) {\n      result.push(item);\n    }\n\n    idx += 1;\n  }\n\n  return result;\n}));\n\nexport default uniqBy;"]},"metadata":{},"sourceType":"module"}