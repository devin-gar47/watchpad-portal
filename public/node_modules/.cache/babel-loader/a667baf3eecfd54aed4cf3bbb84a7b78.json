{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport _reduce from \"./internal/_reduce.js\";\n/**\n * Splits a list into sub-lists, based on the result of calling a key-returning function on each element,\n * and grouping the results according to values returned.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category List\n * @typedefn Idx = String | Int | Symbol\n * @sig Idx a => (b -> a) -> [b] -> [[b]]\n * @param {Function} fn Function :: a -> Idx\n * @param {Array} list The array to group\n * @return {Array}\n *    An array of arrays where each sub-array contains items for which\n *    the String-returning function has returned the same value.\n * @see R.groupBy, R.partition\n * @example\n *      R.collectBy(R.prop('type'), [\n *        {type: 'breakfast', item: '☕️'},\n *        {type: 'lunch', item: '🌯'},\n *        {type: 'dinner', item: '🍝'},\n *        {type: 'breakfast', item: '🥐'},\n *        {type: 'lunch', item: '🍕'}\n *      ]);\n *\n *      // [ [ {type: 'breakfast', item: '☕️'},\n *      //     {type: 'breakfast', item: '🥐'} ],\n *      //   [ {type: 'lunch', item: '🌯'},\n *      //     {type: 'lunch', item: '🍕'} ],\n *      //   [ {type: 'dinner', item: '🍝'} ] ]\n */\n\nvar collectBy = /*#__PURE__*/_curry2(function collectBy(fn, list) {\n  var group = _reduce(function (o, x) {\n    var tag = fn(x);\n\n    if (o[tag] === undefined) {\n      o[tag] = [];\n    }\n\n    o[tag].push(x);\n    return o;\n  }, {}, list);\n\n  var newList = [];\n\n  for (var tag in group) {\n    newList.push(group[tag]);\n  }\n\n  return newList;\n});\n\nexport default collectBy;","map":{"version":3,"sources":["/Users/veenguyen/Desktop/MS in Software Engineering/SE491/watchpad-portal/node_modules/ramda/es/collectBy.js"],"names":["_curry2","_reduce","collectBy","fn","list","group","o","x","tag","undefined","push","newList"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,SAAS,GACb,aACAF,OAAO,CAAC,SAASE,SAAT,CAAmBC,EAAnB,EAAuBC,IAAvB,EAA6B;AACnC,MAAIC,KAAK,GAAGJ,OAAO,CAAC,UAAUK,CAAV,EAAaC,CAAb,EAAgB;AAClC,QAAIC,GAAG,GAAGL,EAAE,CAACI,CAAD,CAAZ;;AAEA,QAAID,CAAC,CAACE,GAAD,CAAD,KAAWC,SAAf,EAA0B;AACxBH,MAAAA,CAAC,CAACE,GAAD,CAAD,GAAS,EAAT;AACD;;AAEDF,IAAAA,CAAC,CAACE,GAAD,CAAD,CAAOE,IAAP,CAAYH,CAAZ;AACA,WAAOD,CAAP;AACD,GATkB,EAShB,EATgB,EASZF,IATY,CAAnB;;AAWA,MAAIO,OAAO,GAAG,EAAd;;AAEA,OAAK,IAAIH,GAAT,IAAgBH,KAAhB,EAAuB;AACrBM,IAAAA,OAAO,CAACD,IAAR,CAAaL,KAAK,CAACG,GAAD,CAAlB;AACD;;AAED,SAAOG,OAAP;AACD,CAnBM,CAFP;;AAuBA,eAAeT,SAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\nimport _reduce from \"./internal/_reduce.js\";\n/**\n * Splits a list into sub-lists, based on the result of calling a key-returning function on each element,\n * and grouping the results according to values returned.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category List\n * @typedefn Idx = String | Int | Symbol\n * @sig Idx a => (b -> a) -> [b] -> [[b]]\n * @param {Function} fn Function :: a -> Idx\n * @param {Array} list The array to group\n * @return {Array}\n *    An array of arrays where each sub-array contains items for which\n *    the String-returning function has returned the same value.\n * @see R.groupBy, R.partition\n * @example\n *      R.collectBy(R.prop('type'), [\n *        {type: 'breakfast', item: '☕️'},\n *        {type: 'lunch', item: '🌯'},\n *        {type: 'dinner', item: '🍝'},\n *        {type: 'breakfast', item: '🥐'},\n *        {type: 'lunch', item: '🍕'}\n *      ]);\n *\n *      // [ [ {type: 'breakfast', item: '☕️'},\n *      //     {type: 'breakfast', item: '🥐'} ],\n *      //   [ {type: 'lunch', item: '🌯'},\n *      //     {type: 'lunch', item: '🍕'} ],\n *      //   [ {type: 'dinner', item: '🍝'} ] ]\n */\n\nvar collectBy =\n/*#__PURE__*/\n_curry2(function collectBy(fn, list) {\n  var group = _reduce(function (o, x) {\n    var tag = fn(x);\n\n    if (o[tag] === undefined) {\n      o[tag] = [];\n    }\n\n    o[tag].push(x);\n    return o;\n  }, {}, list);\n\n  var newList = [];\n\n  for (var tag in group) {\n    newList.push(group[tag]);\n  }\n\n  return newList;\n});\n\nexport default collectBy;"]},"metadata":{},"sourceType":"module"}