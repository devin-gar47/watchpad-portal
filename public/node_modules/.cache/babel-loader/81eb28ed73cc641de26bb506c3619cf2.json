{"ast":null,"code":"import _isArray from \"./_isArray.js\";\nimport _isInteger from \"./_isInteger.js\";\n/**\n * Makes a shallow clone of an object, applying the given fn to the specified\n * property with the given value. Note that this copies and flattens prototype\n * properties onto the new object as well. All non-primitive properties are\n * copied by reference.\n *\n * @private\n * @param {String|Number} prop The property name to set\n * @param {Function} fn The function to apply to the property\n * @param {Object|Array} obj The object to clone\n * @return {Object|Array} A new object equivalent to the original except for the changed property.\n */\n\nexport default function _modify(prop, fn, obj) {\n  if (_isInteger(prop) && _isArray(obj)) {\n    var arr = [].concat(obj);\n    arr[prop] = fn(arr[prop]);\n    return arr;\n  }\n\n  var result = {};\n\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n\n  result[prop] = fn(result[prop]);\n  return result;\n}","map":{"version":3,"sources":["/Users/veenguyen/Desktop/MS in Software Engineering/SE491/watchpad-portal/node_modules/ramda/es/internal/_modify.js"],"names":["_isArray","_isInteger","_modify","prop","fn","obj","arr","concat","result","p"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,eAArB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,EAAvB,EAA2BC,GAA3B,EAAgC;AAC7C,MAAIJ,UAAU,CAACE,IAAD,CAAV,IAAoBH,QAAQ,CAACK,GAAD,CAAhC,EAAuC;AACrC,QAAIC,GAAG,GAAG,GAAGC,MAAH,CAAUF,GAAV,CAAV;AACAC,IAAAA,GAAG,CAACH,IAAD,CAAH,GAAYC,EAAE,CAACE,GAAG,CAACH,IAAD,CAAJ,CAAd;AACA,WAAOG,GAAP;AACD;;AAED,MAAIE,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAIC,CAAT,IAAcJ,GAAd,EAAmB;AACjBG,IAAAA,MAAM,CAACC,CAAD,CAAN,GAAYJ,GAAG,CAACI,CAAD,CAAf;AACD;;AAEDD,EAAAA,MAAM,CAACL,IAAD,CAAN,GAAeC,EAAE,CAACI,MAAM,CAACL,IAAD,CAAP,CAAjB;AACA,SAAOK,MAAP;AACD","sourcesContent":["import _isArray from \"./_isArray.js\";\nimport _isInteger from \"./_isInteger.js\";\n/**\n * Makes a shallow clone of an object, applying the given fn to the specified\n * property with the given value. Note that this copies and flattens prototype\n * properties onto the new object as well. All non-primitive properties are\n * copied by reference.\n *\n * @private\n * @param {String|Number} prop The property name to set\n * @param {Function} fn The function to apply to the property\n * @param {Object|Array} obj The object to clone\n * @return {Object|Array} A new object equivalent to the original except for the changed property.\n */\n\nexport default function _modify(prop, fn, obj) {\n  if (_isInteger(prop) && _isArray(obj)) {\n    var arr = [].concat(obj);\n    arr[prop] = fn(arr[prop]);\n    return arr;\n  }\n\n  var result = {};\n\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n\n  result[prop] = fn(result[prop]);\n  return result;\n}"]},"metadata":{},"sourceType":"module"}